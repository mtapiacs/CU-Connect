exports.postNewPassword = (req, res, next) => {
	const newPassword = req.body.password;
	const userId = req.body.userId;
	const passwordToken = req.body.passwordToken;
	let resetUser;

	User.findOne({
		resetToken: passwordToken,
		resetTokenExpiration: { $gt: Date.now() },
		_id: userId
	})
		.then(user => {
			resetUser = user;
			return bcrypt.hash(newPassword, 12);
		})
		.then(hashedPassword => {
			resetUser.password = hashedPassword;
			resetUser.resetToken = undefined;
			resetUser.resetTokenExpiration = undefined;
			return resetUser.save();
		})
		.then(result => {
			res.redirect("/login");
		})
		.catch(err => {
			const error = new Error(err);
			error.httpStatusCode = 500;
			// throw error;
			return next(error);
		});
};

exports.postReset = (req, res, next) => {
	crypto.randomBytes(32, (err, buffer) => {
		if (err) {
			return res.redirect("/reset");
		}
		// Turn Buffer Into String
		const token = buffer.toString("hex");
		User.findOne({ email: req.body.email })
			.then(user => {
				if (!user) {
					req.flash("error", "No account with that email found.");
					return res.redirect("/reset");
				}
				user.resetToken = token;
				user.resetTokenExpiration = Date.now() + 3600000;
				return user.save();
			})
			.then(result => {
				if (result) {
					res.redirect("/");
					transporter.sendMail({
						to: req.body.email,
						from: "admin@cu-connect.com",
						subject: "Password Reset",
						html: `
                            <p>You requested a password reset</p>
                            <p>Click this <a href="http://localhost:3000/reset/${token}">link</a> to set a new password.</p>
                        `
					});
				}
			})
			.catch(err => {
				const error = new Error(err);
				error.httpStatusCode = 500;
				// throw error
				return next(error);
			});
	});
};

.custom((value, { req }) => {
    return User.findOne({ email: value }).then(userDoc => {
        if (userDoc) {
            return Promise.reject(
                "E-mail exists already, please pick a different one."
            );
        }
    });
})